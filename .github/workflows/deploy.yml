name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      stage:
        description: "Select environment"
        required: true
        default: "prod"
        type: choice
        options:
          - prod

run-name: "Deploy to stage: '${{ github.ref == 'refs/heads/main' && inputs.stage || 'prod' }}' - '${{ github.event.head_commit.message }}'"

env:
  NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NODE_OPTIONS: "--max_old_space_size=4096"
  DENO_DEPLOY_TOKEN: ${{ secrets.DENO_DEPLOY_TOKEN }}

jobs:
  build-deno:
    runs-on: ubuntu-latest
    name: Build UI for Deno Deploy

    steps:
      - name: Checkout code 📁
        uses: actions/checkout@v3

      - name: Add npm credentials 🔒
        run: echo "//npm.pkg.github.com/:_authToken=$NODE_AUTH_TOKEN" > ~/.npmrc

      - name: Install Deno ⬇️
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Install dependencies ⬇️
        run: npm ci

      - name: Build - Deno ⚒️
        run: npm run build:deno

      - name: Preview - Deno 👀
        run: npm run preview:deno & sleep 1 && kill $!

      - name: Zip project files 📦
        run: zip -r project.zip .

      - name: Upload build artifact - Deno 📦
        uses: actions/upload-artifact@v2
        with:
          name: build-${{ github.sha }}-${{ github.run_number }}-deno
          path: project.zip
          retention-days: 7

  build-aws-lambda:
    runs-on: ubuntu-latest
    name: Build API for AWS Lambda

    steps:
      - name: Checkout code 📁
        uses: actions/checkout@v3

      - name: Add npm credentials 🔒
        run: echo "//npm.pkg.github.com/:_authToken=$NODE_AUTH_TOKEN" > ~/.npmrc

      - name: Install dependencies ⬇️
        run: npm ci

      - name: Install serverless CLI ⬇️
        run: npm i -g serverless

      - name: Build - AWS Lambda ⚒️
        run: npm run build:aws-lambda

      - name: Preview - AWS Lambda 👀
        run: npm run preview:aws-lambda & sleep 3 && kill $!

      - name: Zip project files 📦
        run: zip -r project.zip .

      - name: Upload build artifact - AWS Lambda 📦
        uses: actions/upload-artifact@v2
        with:
          name: build-${{ github.sha }}-${{ github.run_number }}-aws-lambda
          path: project.zip
          retention-days: 7

  deploy:
    runs-on: ubuntu-latest
    name: Deploy UI and API
    needs:
      - build-deno
      - build-aws-lambda
    if: ${{ needs.build-deno.result == 'success' && needs.build-aws-lambda.result == 'success' }}

    steps:
      - name: Checkout code 📁
        uses: actions/checkout@v3

      - name: Add npm credentials 🔒
        run: echo "//npm.pkg.github.com/:_authToken=$NODE_AUTH_TOKEN" > ~/.npmrc

      - name: Install Deno ⬇️
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Install deployctl ⬇️
        run: deno install -A -r -f https://deno.land/x/deploy/deployctl.ts

      - name: Install dependencies ⬇️
        run: npm ci

      - name: Install serverless CLI ⬇️
        run: npm i -g serverless

      - name: Setup AWS keys
        run: serverless config credentials --provider aws --key ${{ secrets.CLAU_AWS_KEY }} --secret ${{ secrets.CLAU_AWS_SECRET }}

      - name: Download Build Artifact - Deno📦
        uses: actions/download-artifact@v2
        with:
          name: build-${{ github.sha }}-${{ github.run_number }}-deno

      - name: Unzip Build Artifact - Deno📦
        run: tar -xf build-${{ needs.build-deno.outputs.build_id }}-deno.tar.gz -C build-deno

      - name: Download Build Artifact - AWS Lambda 📦
        uses: actions/download-artifact@v2
        with:
          name: build-${{ github.sha }}-${{ github.run_number }}-aws-lambda

      - name: Unzip Build Artifact - AWS Lambda 📦
        run: tar -xf build-${{ needs.build-aws-lambda.outputs.build_id }}-aws-lambda.tar.gz -C build-aws-lambda

      - name: Deploy - Deno 🚀
        working-directory: ./build-deno
        run: npm run deploy:deno

      - name: Deploy - AWS Lambda 🚀
        working-directory: ./build-aws-lambda
        run: npm run deploy:aws-lambda
